(* Quotations of terms for examples *)

From Coq Require Import Bool String List BinPos Compare_dec Omega.
From Equations Require Import Equations DepElimDec.
From Template Require Import Ast LiftSubst Typing Checker.
From Translation Require Import util Sorts SAst.

Inductive vec A : nat -> Type :=
| vnil : vec A 0
| vcons : A -> forall n, vec A n -> vec A (S n).

Arguments vnil {_}.
Arguments vcons {_} _ _ _.

Existing Instance Sorts.type_in_type.
Open Scope string_scope.

(* We have conversion obligations that were generated by the typing of vrev.
   We state them here in order to realise them in Coq.
 *)
Definition ty_obligation1 : sterm :=
  sProd (nNamed "A") (sSort tt) (
  sProd (nNamed "n") (sAx "nat") (
  sProd (nNamed "m") (sAx "nat") (
  sProd (nNamed "v") (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 2)) (sAx "nat") (sSort tt) (sRel 1)) (
  sProd (nNamed "acc") (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 3)) (sAx "nat") (sSort tt) (sRel 1)) (
  sEq (sSort tt)
      (sProd (nNamed "m") (sAx "nat")
         (sProd (nNamed "acc")
            (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 5)) (sAx "nat") (sSort tt) (sRel 0))
            (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 6)) (sAx "nat") (sSort tt) (sRel 1))))
      (sApp
         (sApp
            (sLambda (nNamed "n") (sAx "nat")
               (sProd (nNamed "v")
                  (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 5)) 
                     (sAx "nat") (sSort tt) (sRel 0)) (sSort tt))
               (sLambda (nNamed "v")
                  (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 5)) 
                     (sAx "nat") (sSort tt) (sRel 0)) (sSort tt)
                  (sProd (nNamed "m") (sAx "nat")
                     (sProd nAnon
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 7)) 
                           (sAx "nat") (sSort tt) (sRel 0))
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                           (sAx "nat") (sSort tt)
                           (sApp (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat")) (sRel 3))
                              (sAx "nat") (sAx "nat") (sRel 1))))))) (sAx "nat")
            (sProd (nNamed "v")
               (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 5)) (sAx "nat") (sSort tt) (sRel 0))
               (sSort tt)) (sAx "O"))
         (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 4)) (sAx "nat") (sSort tt) (sAx "O"))
         (sSort tt)
         (sApp (sAx "vnil") (sSort tt)
            (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 0)) (sAx "nat") (sSort tt) (sAx "O"))
            (sRel 4)))))))).

Definition typ_obligation2 : sterm :=
  sProd (nNamed "A") (sSort tt) (
  sProd (nNamed "n") (sAx "nat") (
  sProd (nNamed "m") (sAx "nat") (
  sProd (nNamed "v") (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 2)) (sAx "nat") (sSort tt) (sRel 1)) (
  sProd (nNamed "acc") (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 3)) (sAx "nat") (sSort tt) (sRel 1)) (
sEq (sSort tt)
      (sProd (nNamed "f")
         (sProd (nNamed "a") (sRel 4)
            (sProd (nNamed "n") (sAx "nat")
               (sProd (nNamed "v")
                  (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 6)) 
                     (sAx "nat") (sSort tt) (sRel 0))
                  (sProd nAnon
                     (sApp
                        (sApp
                           (sLambda (nNamed "n") (sAx "nat")
                              (sProd (nNamed "v")
                                 (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                                    (sAx "nat") (sSort tt) (sRel 0)) (sSort tt))
                              (sLambda (nNamed "v")
                                 (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                                    (sAx "nat") (sSort tt) (sRel 0)) (sSort tt)
                                 (sProd (nNamed "m") (sAx "nat")
                                    (sProd nAnon
                                       (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 10))
                                          (sAx "nat") (sSort tt) (sRel 0))
                                       (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 11))
                                          (sAx "nat") (sSort tt)
                                          (sApp
                                             (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat"))
                                                (sRel 3)) (sAx "nat") (sAx "nat") (sRel 1))))))) (sAx "nat")
                           (sProd (nNamed "v")
                              (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                                 (sAx "nat") (sSort tt) (sRel 0)) (sSort tt)) (sRel 1))
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 7)) 
                           (sAx "nat") (sSort tt) (sRel 1)) (sSort tt) (sRel 0))
                     (sApp
                        (sApp
                           (sLambda (nNamed "n") (sAx "nat")
                              (sProd (nNamed "v")
                                 (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) 
                                    (sAx "nat") (sSort tt) (sRel 0)) (sSort tt))
                              (sLambda (nNamed "v")
                                 (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) 
                                    (sAx "nat") (sSort tt) (sRel 0)) (sSort tt)
                                 (sProd (nNamed "m") (sAx "nat")
                                    (sProd nAnon
                                       (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 11))
                                          (sAx "nat") (sSort tt) (sRel 0))
                                       (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 12))
                                          (sAx "nat") (sSort tt)
                                          (sApp
                                             (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat"))
                                                (sRel 3)) (sAx "nat") (sAx "nat") (sRel 1))))))) (sAx "nat")
                           (sProd (nNamed "v")
                              (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) 
                                 (sAx "nat") (sSort tt) (sRel 0)) (sSort tt)) (sApp (sAx "S") (sAx "nat") (sAx "nat") (sRel 2)))
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                           (sAx "nat") (sSort tt) (sApp (sAx "S") (sAx "nat") (sAx "nat") (sRel 2))) 
                        (sSort tt)
                        (sApp
                           (sApp
                              (sApp
                                 (sApp (sAx "vcons") (sSort tt)
                                    (sProd nAnon (sRel 0)
                                       (sProd (nNamed "n") (sAx "nat")
                                          (sProd nAnon
                                             (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 2))
                                                (sAx "nat") (sSort tt) (sRel 0))
                                             (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 3))
                                                (sAx "nat") (sSort tt) (sApp (sAx "S") (sAx "nat") (sAx "nat") (sRel 1))))))
                                    (sRel 8)) (sRel 8)
                                 (sProd (nNamed "n") (sAx "nat")
                                    (sProd nAnon
                                       (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 10))
                                          (sAx "nat") (sSort tt) (sRel 0))
                                       (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 11))
                                          (sAx "nat") (sSort tt) (sApp (sAx "S") (sAx "nat") (sAx "nat") (sRel 1))))) 
                                 (sRel 3)) (sAx "nat")
                              (sProd nAnon
                                 (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) 
                                    (sAx "nat") (sSort tt) (sRel 0))
                                 (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 10)) 
                                    (sAx "nat") (sSort tt) (sApp (sAx "S") (sAx "nat") (sAx "nat") (sRel 1)))) 
                              (sRel 2))
                           (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                              (sAx "nat") (sSort tt) (sRel 2))
                           (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) 
                              (sAx "nat") (sSort tt) (sApp (sAx "S") (sAx "nat") (sAx "nat") (sRel 3))) 
                           (sRel 1)))))))
         (sProd (nNamed "n") (sAx "nat")
            (sProd (nNamed "v")
               (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 6)) (sAx "nat") 
                  (sSort tt) (sRel 0))
               (sApp
                  (sApp
                     (sLambda (nNamed "n") (sAx "nat")
                        (sProd (nNamed "v")
                           (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                              (sAx "nat") (sSort tt) (sRel 0)) (sSort tt))
                        (sLambda (nNamed "v")
                           (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                              (sAx "nat") (sSort tt) (sRel 0)) (sSort tt)
                           (sProd (nNamed "m") (sAx "nat")
                              (sProd nAnon
                                 (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 10)) 
                                    (sAx "nat") (sSort tt) (sRel 0))
                                 (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 11)) 
                                    (sAx "nat") (sSort tt)
                                    (sApp (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat")) (sRel 3))
                                       (sAx "nat") (sAx "nat") (sRel 1))))))) (sAx "nat")
                     (sProd (nNamed "v")
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                           (sAx "nat") (sSort tt) (sRel 0)) (sSort tt)) (sRel 1))
                  (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 7)) 
                     (sAx "nat") (sSort tt) (sRel 1)) (sSort tt) (sRel 0)))))
      (sProd (nNamed "f")
         (sProd (nNamed "a") (sRel 4)
            (sProd (nNamed "n") (sAx "nat")
               (sProd (nNamed "v")
                  (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 6)) 
                     (sAx "nat") (sSort tt) (sRel 0))
                  (sProd nAnon
                     (sProd (nNamed "m") (sAx "nat")
                        (sProd nAnon
                           (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                              (sAx "nat") (sSort tt) (sRel 0))
                           (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) 
                              (sAx "nat") (sSort tt)
                              (sApp (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat")) (sRel 3))
                                 (sAx "nat") (sAx "nat") (sRel 1)))))
                     (sProd (nNamed "m") (sAx "nat")
                        (sProd nAnon
                           (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) 
                              (sAx "nat") (sSort tt) (sRel 0))
                           (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 10)) 
                              (sAx "nat") (sSort tt)
                              (sApp
                                 (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat"))
                                    (sApp (sAx "S") (sAx "nat") (sAx "nat") (sRel 4))) (sAx "nat") 
                                 (sAx "nat") (sRel 1)))))))))
         (sProd (nNamed "n") (sAx "nat")
            (sProd (nNamed "v")
               (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 6)) (sAx "nat") 
                  (sSort tt) (sRel 0))
               (sProd (nNamed "m") (sAx "nat")
                  (sProd nAnon
                     (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                        (sAx "nat") (sSort tt) (sRel 0))
                     (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) 
                        (sAx "nat") (sSort tt)
                        (sApp (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat")) (sRel 3)) 
                           (sAx "nat") (sAx "nat") (sRel 1))))))))))))).

Definition ty_obligation3 : sterm :=
  sProd (nNamed "A") (sSort tt) (
  sProd (nNamed "n") (sAx "nat") (
  sProd (nNamed "m") (sAx "nat") (
  sProd (nNamed "v") (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 2)) (sAx "nat") (sSort tt) (sRel 1)) (
  sProd (nNamed "acc") (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 3)) (sAx "nat") (sSort tt) (sRel 1)) (
  sProd (nNamed "a") (sRel 4) (
  sProd (nNamed "n") (sAx "nat") (
  sProd (nNamed "v") (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 6)) (sAx "nat") (sSort tt) (sRel 0)) (
  sProd nAnon (sProd (nNamed "m") (sAx "nat")
    (sProd nAnon
       (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) (sAx "nat") (sSort tt) (sRel 0))
       (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) (sAx "nat") 
          (sSort tt)
          (sApp (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat")) (sRel 3)) 
             (sAx "nat") (sAx "nat") (sRel 1))))) (
  sProd (nNamed "m") (sAx "nat") (
  sProd (nNamed "acc") (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) (sAx "nat") (sSort tt) (sRel 0)) (
sEq (sSort tt)
      (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 10)) (sAx "nat") 
         (sSort tt)
         (sApp (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat")) (sRel 4)) 
            (sAx "nat") (sAx "nat") (sApp (sAx "S") (sAx "nat") (sAx "nat") (sRel 1))))
      (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 10)) (sAx "nat") 
         (sSort tt)
         (sApp
            (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat"))
               (sApp (sAx "S") (sAx "nat") (sAx "nat") (sRel 4))) (sAx "nat") (sAx "nat") (sRel 1)))
))))))))))).

Definition ty_obligation4 : sterm :=
  sProd (nNamed "A") (sSort tt) (
  sProd (nNamed "n") (sAx "nat") (
  sProd (nNamed "m") (sAx "nat") (
  sProd (nNamed "v") (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 2)) (sAx "nat") (sSort tt) (sRel 1)) (
  sProd (nNamed "acc") (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 3)) (sAx "nat") (sSort tt) (sRel 1)) (sEq (sSort tt)
      (sProd (nNamed "a") (sRel 4)
         (sProd (nNamed "n") (sAx "nat")
            (sProd (nNamed "v")
               (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 6)) (sAx "nat") 
                  (sSort tt) (sRel 0))
               (sProd (nNamed "rv")
                  (sProd (nNamed "m") (sAx "nat")
                     (sProd nAnon
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                           (sAx "nat") (sSort tt) (sRel 0))
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) 
                           (sAx "nat") (sSort tt)
                           (sApp (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat")) (sRel 3))
                              (sAx "nat") (sAx "nat") (sRel 1)))))
                  (sProd (nNamed "m") (sAx "nat")
                     (sProd (nNamed "acc")
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) 
                           (sAx "nat") (sSort tt) (sRel 0))
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 10)) 
                           (sAx "nat") (sSort tt)
                           (sApp
                              (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat"))
                                 (sApp (sAx "S") (sAx "nat") (sAx "nat") (sRel 4))) (sAx "nat") (sAx "nat") 
                              (sRel 1)))))))))
      (sProd (nNamed "a") (sRel 4)
         (sProd (nNamed "n") (sAx "nat")
            (sProd (nNamed "v")
               (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 6)) (sAx "nat") 
                  (sSort tt) (sRel 0))
               (sProd nAnon
                  (sProd (nNamed "m") (sAx "nat")
                     (sProd nAnon
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 8)) 
                           (sAx "nat") (sSort tt) (sRel 0))
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) 
                           (sAx "nat") (sSort tt)
                           (sApp (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat")) (sRel 3))
                              (sAx "nat") (sAx "nat") (sRel 1)))))
                  (sProd (nNamed "m") (sAx "nat")
                     (sProd nAnon
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 9)) 
                           (sAx "nat") (sSort tt) (sRel 0))
                        (sApp (sApp (sAx "vec") (sSort tt) (sProd nAnon (sAx "nat") (sSort tt)) (sRel 10)) 
                           (sAx "nat") (sSort tt)
                           (sApp
                              (sApp (sAx "add") (sAx "nat") (sProd (nNamed "m") (sAx "nat") (sAx "nat"))
                                 (sApp (sAx "S") (sAx "nat") (sAx "nat") (sRel 4))) (sAx "nat") (sAx "nat") 
                              (sRel 1)))))))))))))).

Lemma vrev_eq0 : forall A m, vec A (0 + m) = vec A m.
Proof.
  reflexivity.
Defined.

Lemma vrev_eq1 : forall A n m, vec A (n + S m) = vec A (S n + m).
Proof.
  intros A n m. f_equal. omega.
Defined.